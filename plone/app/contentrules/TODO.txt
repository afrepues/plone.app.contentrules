============================
plone.app.contentrules to-do
============================

 Install via easy_install or symlinks to lib/python. You must install both
 plone.contentrules and plone.app.contentrules. You will also need the 
 Plone 3.0 bundle (or plip157 bundle) and Zope 2.10!
 
 Make sure you put a slug in etc/package-includes like 
 plone.app.portlets-configure.zcml, containing
 
  <include package="plone.app.contentrules" />

 To test, go to a regular Folder in Plone, and append @@manage-content-rules
 to the URL, e.g. http://localhost:8080/Plone/my-folder/@@manage-content-rules.

 Known issues
 ------------
 
  - Cancel button on add form still tries to execute validator
  
  - Add and edit forms don't use Plone styling
    -> need to integate with plone.app.form
    
  - Tests for event handling not in place
    
 Design
 ------
 
  - Re-visit reliance on Node
      - consider pattern in zope.app.content, marking element interfaces like
        ILoggerAction with an IInterface like IRuleActionType
      - queryType() can find such interfaces
      - the interface may tell us enough about a type
          - how to get name, description of the element type?
          - how to get edit view (can rely on edit.html convention)

 Views
 -----
 
   - UI for re-ordering rules?
      
 Conditions
 ----------
 
  Add more realistic conditions, such as:
 
    - Portal type
       Should use vocabulary; see zope.formlib docs?
    
    - Group
        Check out portal_groups' API in the DocFinderTab
    
    - Workflow state
        from Products.CMFCore.utils import getToolByName
        portal_workflow = getToolByName(self.context, 'portal_workflow')
        portal_workflow.getInfoFor(self.context, 'review_state')
        - look at CMFCore.interfaces._tools for IWorkflowTool definition
    - Arbitary TALES expression (?)
    
    Here's some code from http://svn.plone.org/svn/collective/PloneContextActions/trunk/ContextCriteriaMatcher.py
    
    from Acquisition import aq_base
    from AccessControl import getSecurityManager
    from Products.CMFCore.utils import getToolByName
    from Products.CMFCore.Expression import Expression
    from Products.CMFCore.Expression import createExprContext

    from Acquisition import aq_base, aq_parent, aq_inner

    note that brain.getExpression would be replaced with the string TALES
    expression. 
    
        def evaluateCondition(self, brain, context):
        """Evaluate an object's TALES condition to see if it should be 
        displayed
        """
        try:
            if brain.getExpression and context is not None:
                portal = getToolByName(self, 'portal_url').getPortalObject()
                
                # Find folder (code courtesy of CMFCore.ActionsTool)
                if context is None or not hasattr(context, 'aq_base'):
                    folder = portal
                else:
                    folder = context
                    # Search up the containment hierarchy until we find an
                    # object that claims it's a folder.
                    while folder is not None:
                        if getattr(aq_base(folder), 'isPrincipiaFolderish', 0):
                            # found it.
                            break
                        else:
                            folder = aq_parent(aq_inner(folder))
                
                __traceback_info__ = (folder, portal, context, 
                                        brain.getExpression)
                ec = createExprContext(folder, portal, context)
                return Expression(brain.getExpression)(ec)
            else:
                return 1
        except AttributeError:
            return 1
    
    - ...
  
 Actions
 -------
  
  Add more realistic actions, such as:

  - Move to folder
  - Copy to folder
      Look at folder_copy.cpy and folder_paste.cpy in CMFPlone
  
  - Transition workflow
  
      from Products.CMFCore.utils import getToolByName
      portal_workflow = getToolByName(self.context, 'portal_workflow')
      portal_workflow.doActionFor(self.context, 'transition-id')
        - look at CMFCore.interfaces._tools for IWorkflowTool definition
      
  - Delete
      Look at object_delete.cpy in CMFPlone
  - Rename
  - Send email
      look at CMFPlone.PloneTool, sendto) and MailHost 
  - ...